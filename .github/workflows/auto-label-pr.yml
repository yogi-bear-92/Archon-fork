name: Auto Label PR

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  auto-label:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Auto Label PR
        uses: actions/labeler@v4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          configuration-path: .github/labeler.yml
          sync-labels: true

      - name: Label by File Changes
        uses: actions/github-script@v7
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const labels = new Set();
            
            files.forEach(file => {
              const path = file.filename;
              
              // ANSF workflow changes
              if (path.includes('ansf-workflow/')) {
                labels.add('ansf-system');
                if (path.includes('phase1')) labels.add('phase-1');
                if (path.includes('phase2')) labels.add('phase-2');
                if (path.includes('phase3')) labels.add('phase-3');
                if (path.includes('production/')) labels.add('production');
              }
              
              // Neural/ML changes
              if (path.includes('neural') || path.includes('ml_') || path.includes('coordination_hooks')) {
                labels.add('neural-ml');
              }
              
              // Monitoring and dashboard changes
              if (path.includes('monitoring') || path.includes('dashboard') || path.includes('metrics')) {
                labels.add('monitoring');
              }
              
              // Flow Nexus challenges
              if (path.includes('flow-nexus-challenges/')) {
                labels.add('challenges');
                if (path.includes('beginner/')) labels.add('beginner');
                if (path.includes('intermediate/')) labels.add('intermediate');
                if (path.includes('advanced/')) labels.add('advanced');
                if (path.includes('expert/')) labels.add('expert');
              }
              
              // Documentation changes
              if (path.endsWith('.md')) {
                labels.add('documentation');
              }
              
              // Configuration changes
              if (path.includes('.github/') || path.includes('config') || path.endsWith('.json') || path.endsWith('.yml')) {
                labels.add('configuration');
              }
              
              // Python changes
              if (path.endsWith('.py')) {
                labels.add('python');
              }
              
              // JavaScript/Node changes
              if (path.endsWith('.js') || path.includes('package.json')) {
                labels.add('javascript');
              }
            });
            
            // Apply labels
            if (labels.size > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: Array.from(labels)
              });
            }

      - name: Label by PR Size
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const additions = pr.additions;
            const deletions = pr.deletions;
            const total = additions + deletions;
            
            let sizeLabel = '';
            if (total < 10) sizeLabel = 'size/XS';
            else if (total < 100) sizeLabel = 'size/S';
            else if (total < 500) sizeLabel = 'size/M';
            else if (total < 1000) sizeLabel = 'size/L';
            else sizeLabel = 'size/XL';
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: [sizeLabel]
            });